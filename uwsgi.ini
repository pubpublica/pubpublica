[uwsgi]
; * DEFAULTS
strict = true ; fail if unknown config parameter is found
single-interpreter = true ; just one interpreter per worker is fine
enable-threads = true ; because otherwise threading in python does not work
need-app = true ; fail to start if no app is found
die-on-term = true ; kill uwsgi on SIGTERM, don't reload

;disable-logging = true
; always log errors
log-4xx = true
log-5xx = true

; * SCALING
master = true
threads = 2
processes = 4 ; maximum number of workers allowed

; dynamically scale the number of workers
; "busyness" is a less aggressive worker spawning/killing algorithm
cheaper-algo = busyness
; it adds or removes workers based on average utilization, it generally
; keeps more workers available than needed, to have some capacity for
; new requests, and only cheaps a worker when there's a good chance it
; is not needed.

cheaper = 2 ; minimum number of workers allowed
cheaper-initial = 6 ; workers created at startup
cheaper-step = 1 ; how many workers to spawn at a time
cheaper-overload = 30 ; length, in seconds, of the window used to track average utilization
cheaper-busyness-min = 25 ; below this threshold, kill workers
cheaper-busyness-max = 80 ; above this threshold, spawn new workers
cheaper-busyness-multiplier = 10 ; how many cycles a worker needs to be below its threshold before its killed
cheaper-busyness-penalty = 2 ; number of cycles added to cheaper-busyness-multiplier, if a worker is respawned too quickly
cheaper-busyness-backlog-alert = 16 ; spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-nonzero = 60 ; spawn emergency workers if the request queue is nonempty for this many seconds
cheaper-busyness-backlog-step = 2 ; number of emergency workers to spawn if there is an alert

;cheaper-busyness-verbose = true ; verbose logs from the cheaper subsystem

max-requests = 1000 ; restart workers after this many requests
max-worker-lifetime = 3600 ; restart workers older than this many seconds
reload-on-rss = 512 ; restart workers who have allocated more than this many megabytes of memory
worker-reload-mercy = 60 ; how many seconds to wait before forcefully killing workers

harakiri = 30 ; forcefully kill stuck workers after this many seconds
;py-call-osafterfork = true ; allow python workers to receive system signals (e.g. signal.alarm)

; * APP SPECIFIC
auto-procname = true ; better process naming
procname-prefix = "pubpublica "
; or use the setprocname fn in the uwsgi python API


module = wsgi
venv = venv/

logger = file:logfile=/var/log/pubpublica/uwsgi.log,maxsize=1048576
log-date = %%Y-%%m-%%d %%H:%%M:%%S
logformat-strftime
log-format = %(ftime) - [worker %(wid)] %(addr) sent %(pktsize) bytes  ->  %(method) %(uri)  ->  returned %(size) bytes in %(msecs)ms (%(proto) %(status))

;http-socket = 127.0.0.1:5000
socket = /var/run/pubpublica/pubpublica.sock
chmod-socket = 660
chown-socket = pubpublica:www-data

; NOTE: dropping privileges, means we no longer have delete access to
; the /var/run folder, so deleting the socket fails, even though we
; have access to the socket?
; thus, when closing uwsgi we get: `unlink(): Permission denied [core/uwsgi.c ...]'
; see https://github.com/unbit/uwsgi/issues/892
vacuum = true ; remove socket when shutting down

; drop permissions after setting up
uid = pubpublica
gid = www-data
